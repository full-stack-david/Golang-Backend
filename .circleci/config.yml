# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  test:
    docker:
      # specify the version
      - image: circleci/golang:1.12
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      #### TEMPLATE_NOTE: go expects specific checkout path representing url
      #### expecting it in the form of
      ####   /go/src/github.com/circleci/go-tool
      ####   /go/src/bitbucket.org/circleci/go-tool
    steps:
      - checkout
      # specify any bash command here prefixed with `run: `
      - run:
          command: go test -v ./...
          working_directory: /home/circleci/project/reward.enoram.com
      - run:
          command: go build
          working_directory: /home/circleci/project/reward.enoram.com
  build-image:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              DOCKER_IMAGE_TAG=v${CIRCLE_BUILD_NUM}
              echo "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" > full_docker_image_name
            else
              DOCKER_IMAGE_TAG=${CIRCLE_BRANCH}
              echo "reward:$DOCKER_IMAGE_TAG" > full_docker_image_name
            fi
      - run:
          name: Build image
          command: |
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            pwd
            ls 
            docker build -t $FULL_DOCKER_IMAGE_NAME -f reward.enoram.com/Dockerfile reward.enoram.com/
      - run:
          name: Install utils
          command: |
            apt-get update
            apt-get install -y jq
      - run:
          name: Push image
          command: |
            set -x
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
              echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud --quiet auth configure-docker
              docker push $FULL_DOCKER_IMAGE_NAME
            else
              echo "Not master branch; skipping image push.."
            fi
      - persist_to_workspace:
          root: .
          paths:
            - full_docker_image_name
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:    
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Install utils
          command: |
            apt-get update
            apt-get install -y jq
      - run:
          name: Deploy
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            set -x
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            EXISTING_CLUSTER=$(gcloud container clusters list --format="value(name)" --filter="name=$GOOGLE_CLUSTER_NAME")
            if [ "${EXISTING_CLUSTER}" != $GOOGLE_CLUSTER_NAME ]
            then
              # Create cluster if it doesn't already exist
              gcloud --quiet container clusters create $GOOGLE_CLUSTER_NAME --num-nodes=1
            else
              gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME
            fi
            FULL_DOCKER_IMAGE_NAME=$(cat workspace/full_docker_image_name)
            # Replace DOCKER_IMAGE_NAME placeholder in manifest with actual image name
            KUBE_CONFIG=$(cat reward.enoram.com/deployment.yaml.template | sed "s|DOCKER_IMAGE_NAME|$FULL_DOCKER_IMAGE_NAME|g")
            echo "$KUBE_CONFIG" | kubectl apply -f -
            # Wait for deployment to finish
            kubectl rollout status deployment/reward-cd-deployment
            kubectl get pods --output=wide
workflows:
  version: 2
  build-deploy:
    jobs:
      - test
      - build-image:
          requires:
            - test
      - deploy:
          requires:
            - build-image
          filters:
            branches:
              only: master      